@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Net.Http.Json
@using System.Threading;
@using Microsoft.Extensions.Configuration
@using Timer = System.Threading.Timer
@inject ReddocoinValueService ReddocoinValueService
@inject ChartService ChartService
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IConfiguration Configuration

<MudMainContent Class="Margin0 Padding0">
    <CascadingValue Value="ReddocoinValue">
        <CascadingValue Value="ChartSeries">
            <HeroBanner />
        </CascadingValue>
    </CascadingValue>
    <EasySteps />
    <AdvantagesLayout />
    <AdoptionAndValueLayout />
</MudMainContent>


@code
{
    private IConfiguration configuration { get; set; }
    private static System.Timers.Timer aTimer;
    public ReddocoinValue ReddocoinValue { get; set; } = new();
    private HubConnection hubConnection;
    private string apiUrl = "";
    public List<ChartSeries> ChartSeries = new List<ChartSeries>()
{
        new ChartSeries() {  Data = new double[] { 90, 79, 72, 69, 62, 62, 55, 65, 70 } },
    };

    protected override async Task OnInitializedAsync()
    {
        apiUrl = Configuration.GetSection("ApiBaseUrl").Value;
        var timer = new Timer(new TimerCallback(_ =>
        {
            InvokeAsync(async () =>
            {
                await LoadData();
                StateHasChanged();
            });
        }), null, 1000, 1000);
    }


    protected async Task LoadData()
    {
        var data = await Http.GetFromJsonAsync<double[]>(apiUrl + "chart");
        ChartSeries = new List<ChartSeries>()
        {
            new ChartSeries { Data = data }
        };
        ReddocoinValue = ReddocoinValueService.GetReddocoinValue();
        StateHasChanged();
    }
}


